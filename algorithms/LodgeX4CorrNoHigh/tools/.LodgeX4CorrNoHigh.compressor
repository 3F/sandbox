<?xml version="1.0" encoding="utf-8"?>
<!-- 
    Copyright (c) 2015-2018,2020  Denis Kuzmin [ x-3F@outlook.com ]
    
    Licensed under the GetNuTool license
    https://github.com/3F/GetNuTool
-->

<!--
    !!! This is a modified version taken from old GetNuTool project (batch).
    A quick/dirty adapting specially for LodgeX4CorrNoHigh algorithm implementation (n. Embeddable superfast version).
    Do not use this in production because this is not for common use.
-->
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

    <!-- Main settings -->
    <PropertyGroup>
        <core Condition="'$(core)' == ''"></core>
        <output Condition="'$(output)' == ''"></output>
    </PropertyGroup>

    <!-- Entry point -->
    <Target Name="handler" BeforeTargets="Build">
        <Compress core="$(core)" output="$(output)" />
    </Target>
    
    <!-- Tasks settings -->
    <PropertyGroup>
        <TaskCoreDllPath Condition="Exists('$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll')">$(MSBuildToolsPath)\Microsoft.Build.Tasks.v$(MSBuildToolsVersion).dll</TaskCoreDllPath>
        <TaskCoreDllPath Condition="'$(TaskCoreDllPath)' == '' and Exists('$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll')">$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll</TaskCoreDllPath>
    </PropertyGroup>
    
    <!-- Prepares list for downloader below -->
    <UsingTask
        TaskName="Compress"
        TaskFactory="CodeTaskFactory"
        AssemblyFile="$(TaskCoreDllPath)">

        <ParameterGroup>
            <core ParameterType="System.String" Required="true" />
            <output ParameterType="System.String" Required="true" />
        </ParameterGroup>

        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.Collections.Generic" />
            <Using Namespace="System.IO" />
            <Using Namespace="System.Linq" />
            <Using Namespace="System.Text.RegularExpressions" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                
                    Func<char[], int, Func<int, bool>, string[]> gencomb = (char[] _dict, int _size, Func<int, bool> _rule0) =>
                    {
                        var combination = new char[_size];
                        var set         = new List<string>((int)Math.Pow(_dict.Length, _size));

                        int pos = 0;
                        Action generator = null;
                        generator = () =>
                        {
                            for(int i = 0, lim = _size - 1; i < _dict.Length; ++i)
                            {
                                if(pos == 0 && !_rule0(i)) {
                                    continue;
                                }

                                if(pos < lim) {
                                    combination[pos] = _dict[i];
                                    ++pos;
                                    generator();
                                    --pos;
                                }
                                else {
                                    combination[pos] = _dict[i];
                                    set.Add(new String(combination.ToArray()));
                                }
                            }
                        };

                        generator();
                        return set.ToArray();
                    };

                    var variables = new Dictionary<string, string>();

                    var cdict = new[] { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',
                                        'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',
                                        'U', 'V', 'W', 'X', 'Y', 'z', '0', '1', '2', '3',
                                        '4', '5', '6', '7', '8', '9', '_' };

                    Func<int, bool> rule = (int i) => { return char.IsLetter(cdict[i]) || cdict[i] == '_'; };
                    var vdict1 = gencomb(cdict, 1, rule);
                    var vdict2 = gencomb(cdict, 2, rule);
                    
                    var vdict = new string[vdict1.Length + vdict2.Length];
                    vdict1.CopyTo(vdict, 0);
                    vdict2.CopyTo(vdict, vdict1.Length);

                    // to skip processing for:
                    var exvar = new string[] { "true", "false", "a", "b", "c", "d", "ma", "mb", "mc", "md", "high", "low", "ulong", "uint", "long", "int", };

                    // https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/
                    var rsvwords = new[] { "do", "in", "is", "as", "if", "by", "on" };

                    const string VTYPE  = @"(?:
                                            (?'type'
                                                [a-z_]
                                                [a-z_0-9]+
                                                \s+
                                            )?
                                            (?'name'[A-Za-z_0-9]+)
                                            \s*
                                            (?'lim'
                                                \s*[&!;)=+\-*><]
                                            )
                                        )
                                        ";

                    const string VNAME = "[a-z_0-9]+"; // [a-z_][a-z_0-9]+

                    using(StreamReader reader = new StreamReader(core, System.Text.Encoding.UTF8, true))
                    {
                        var content = reader.ReadToEnd();

                        var _c = Regex.Match(content, @"\(c\)\s*[0-9\-,;_]+\s*([^\r\n]+)").Groups[1].Value;
                        content = Regex.Replace(content,
                                         @"[\s\S]+\s
                                           Multiply\s*\(.+?\)
                                           [^{]+\{
                                               ([\s\S]+?)
                                            \}\s*/\*\*/
                                          [\s\S]+", (Match m) =>
                        {
                            string data = m.Groups[1].Value;

                            // comments

                            data = Regex.Replace(data, @"\s*\/\*.+?\*\/\s*", "", RegexOptions.Singleline);
                            data = Regex.Replace(data, @"\s*\/\/.+?$", "", RegexOptions.Multiline);

                            variables.Clear();
                            uint uniqVars = 0;

                            Func<Match, string, string, string, string> shname = delegate(Match _m, string l, string vname, string r)
                            {
                                if(!Regex.IsMatch(vname, "^[a-z_]")) {
                                    return _m.Value;
                                }

                                if(exvar.Contains(vname)) {
                                    return _m.Value;
                                }

                                if(variables.ContainsKey(vname)) {
                                    return l + variables[vname] + r;
                                }

                                if(uniqVars + 1 > vdict.Length) {
                                    throw new OverflowException("vdict does not contain data for new vars");
                                }
                                
                                do {
                                    variables[vname] = vdict[uniqVars++];
                                } 
                                while(rsvwords.Contains(variables[vname]));

                                return l + variables[vname] + r;
                            };

                            data = Regex.Replace
                            (
                                data,
                                VTYPE,
                                (Match _m) =>
                                {
                                    var vname = _m.Groups["name"];
                                    
                                    if(vname.Success) {
                                        return shname(_m, _m.Groups["type"].Value + " ", vname.Value, _m.Groups["lim"].Value);
                                    }

                                    var flambda = _m.Groups["flambda"];
                                    if(flambda.Success) {
                                        return Regex.Replace(flambda.Value, VNAME, __m => shname(__m, _m.Groups["fl"].Value, __m.Value, "=>"));
                                    }

                                    var vlambda = _m.Groups["vlambda"];
                                    if(vlambda.Success) {
                                        return Regex.Replace(vlambda.Value, VNAME, __m => shname(__m, _m.Groups["vl"].Value, __m.Value, "=>"));
                                    }

                                    return _m.Value;
                                },
                                RegexOptions.IgnorePatternWhitespace | RegexOptions.IgnoreCase
                            );

                            // using of variables
                            data = Regex.Replace
                            (
                                data,
                                @"(?'def'^|\s+in\s+|(?<==)>|[={};:\[(,?+\-])
                                    \s*
                                    (?'name'"+ VNAME + @")
                                    (?'exc'[<>]*)?
                                ", 
                                (Match _m) =>
                                {
                                    var def     = _m.Groups["def"].Value;
                                    var vname   = _m.Groups["name"].Value;
                                    var exc     = _m.Groups["exc"].Value;

                                    if(exc.IndexOfAny(new[] { '<', '>' }) != -1) {
                                        return _m.Value;
                                    }

                                    if(!Regex.IsMatch(vname, "^[a-z_]")) {
                                        return _m.Value;
                                    }

                                    if(!variables.ContainsKey(vname)) {
                                        return def + vname + exc;
                                    }
                                    return def + variables[vname] + exc;
                                },
                                RegexOptions.IgnorePatternWhitespace | RegexOptions.IgnoreCase | RegexOptions.Multiline
                            );

                            data = Regex.Replace(data, @"AbsMinus\(([\w]+)\s*,\s*([\w]+)\s*\)\s*;", "($1>$2)?$1-$2:$2-$1;");
                            data = data.Replace(@"return ", "high=");
                            
                            // CDATA rules

                            data = Regex.Replace(data, @"([\s;},])String([\s.(]+)", "$1string$2");
                            data = Regex.Replace(data, @"[sS]tring\s*\.\s*Empty", "\"\"");
                            data = Regex.Replace(data, @"\s*const\s+[sS]tring\s+", "var ");
                            data = Regex.Replace(data, @"(?<![,\( ])[sS]tring\s+(?'def'[^;]+)", (_m) => 
                            {
                                var def = _m.Groups["def"].Value;
                                if(def.IndexOf('=') == -1) {
                                    return _m.Value;
                                }
                                return "var " + def;
                            });

                            // data = Regex.Replace(data, @"([;(){}]\s*)\w+\s+(\w+)\s+(in|=)\s+", " $1 var $2 $3 ");
                            data = Regex.Replace(data, @"\s*([{}()=+\-\[\]*?!@,;.])\s*", "$1");

                            return data;
                        }, 
                        RegexOptions.Singleline | RegexOptions.IgnorePatternWhitespace);

                        // common rules

                        content = content.Replace("\r", "").Replace("\n", "");
                        content = Regex.Replace(content, @"\s{2,}", " ");
                        content = Regex.Replace(content, @"\s*([=,()\[\];:.&|{}\/<>]+)\s*", "$1");

                        content = content.Replace("unchecked{", "unchecked{/*(c) " + _c + " */");
                        

                        using(TextWriter writer = new StreamWriter(output, false, new UTF8Encoding(false))) {
                            writer.Write(content);
                        }
                        Console.WriteLine("Portable version of `{0}` has been created -> `{1}`", core, output);
                    }
                ]]>
            </Code>
        </Task>
    </UsingTask>

    <!-- remap targets -->

    <Target Name="Build" DependsOnTargets="handler" />

</Project>